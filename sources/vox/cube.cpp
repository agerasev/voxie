#include "cube.hpp"

#define sizeof_array(x) (sizeof(x)/sizeof((x)[0]))

Cube::Cube() {
	const float cube_vertex_data[6*2*3*4] = {
	-0.5, -0.5,  0.5, 1,
	 0.5, -0.5,  0.5, 1,
	-0.5,  0.5,  0.5, 1,
	-0.5,  0.5,  0.5, 1,
	 0.5, -0.5,  0.5, 1,
	 0.5,  0.5,  0.5, 1,
	
	-0.5,  0.5, -0.5, 1,
	 0.5,  0.5, -0.5, 1,
	-0.5, -0.5, -0.5, 1,
	-0.5, -0.5, -0.5, 1,
	 0.5,  0.5, -0.5, 1,
	 0.5, -0.5, -0.5, 1,
	
	 0.5, -0.5, -0.5, 1,
	 0.5,  0.5, -0.5, 1,
	 0.5, -0.5,  0.5, 1,
	 0.5,  0.5, -0.5, 1,
	 0.5,  0.5,  0.5, 1,
	 0.5, -0.5,  0.5, 1,
	
	-0.5,  0.5, -0.5, 1,
	-0.5, -0.5, -0.5, 1,
	-0.5,  0.5,  0.5, 1,
	-0.5, -0.5, -0.5, 1,
	-0.5, -0.5,  0.5, 1,
	-0.5,  0.5,  0.5, 1,
	
	-0.5,  0.5, -0.5, 1,
	-0.5,  0.5,  0.5, 1,
	 0.5,  0.5, -0.5, 1,
	-0.5,  0.5,  0.5, 1,
	 0.5,  0.5,  0.5, 1,
	 0.5,  0.5, -0.5, 1,
	
	 0.5, -0.5, -0.5, 1,
	 0.5, -0.5,  0.5, 1,
	-0.5, -0.5, -0.5, 1,
	 0.5, -0.5,  0.5, 1,
	-0.5, -0.5,  0.5, 1,
	-0.5, -0.5, -0.5, 1,
	};
	const float cube_normal_data[6*2*3*4] = {
	 0, 0, 1, 0,
	 0, 0, 1, 0,
	 0, 0, 1, 0,
	 0, 0, 1, 0,
	 0, 0, 1, 0,
	 0, 0, 1, 0,
	
	 0, 0,-1, 0,
	 0, 0,-1, 0,
	 0, 0,-1, 0,
	 0, 0,-1, 0,
	 0, 0,-1, 0,
	 0, 0,-1, 0,
	
	 1, 0, 0, 0,
	 1, 0, 0, 0,
	 1, 0, 0, 0,
	 1, 0, 0, 0,
	 1, 0, 0, 0,
	 1, 0, 0, 0,
	
	-1, 0, 0, 0,
	-1, 0, 0, 0,
	-1, 0, 0, 0,
	-1, 0, 0, 0,
	-1, 0, 0, 0,
	-1, 0, 0, 0,
	
	 0, 1, 0, 0,
	 0, 1, 0, 0,
	 0, 1, 0, 0,
	 0, 1, 0, 0,
	 0, 1, 0, 0,
	 0, 1, 0, 0,
	
	 0,-1, 0, 0,
	 0,-1, 0, 0,
	 0,-1, 0, 0,
	 0,-1, 0, 0,
	 0,-1, 0, 0,
	 0,-1, 0, 0,
	};
	cube_vertex_buffer.loadData(cube_vertex_data, sizeof_array(cube_vertex_data));
	cube_normal_buffer.loadData(cube_normal_data, sizeof_array(cube_normal_data));
	
	const float quad_vertex_data[2*3*4] = {
	-0.5, -0.5, 0, 1,
	 0.5, -0.5, 0, 1,
	 0.5,  0.5, 0, 1,
	-0.5, -0.5, 0, 1,
	 0.5,  0.5, 0, 1,
	-0.5,  0.5, 0, 1,
	};
	const float quad_normal_data[2*3*4] = {
	0, 0, 1, 0,
	0, 0, 1, 0,
	0, 0, 1, 0,
	0, 0, 1, 0,
	0, 0, 1, 0,
	0, 0, 1, 0,
	};
	quad_vertex_buffer.loadData(quad_vertex_data, sizeof_array(quad_vertex_data));
	quad_normal_buffer.loadData(quad_normal_data, sizeof_array(quad_normal_data));
}
